import { GoogleGenAI } from "@google/genai";

// Image generation result interface
export interface ImageGenerationResult {
  imageUrl: string;
  imageData: string;
  imagePrompt: string;
}

// Image generation service for story simulations
export class ImageGenerationService {
  private static instance: ImageGenerationService;
  private ai: GoogleGenAI;

  private constructor() {
    this.ai = new GoogleGenAI({});
  }

  static getInstance(): ImageGenerationService {
    if (!ImageGenerationService.instance) {
      ImageGenerationService.instance = new ImageGenerationService();
    }
    return ImageGenerationService.instance;
  }

  /**
   * Generate an image for a story scene with visual continuity
   * @param sceneDescription - Description of the current scene
   * @param characterContext - Information about the character being played
   * @param previousImages - Array of previous image prompts for continuity
   * @param storyStyle - Visual style of the story
   * @returns Promise<ImageGenerationResult>
   */
  async generateStoryImage(
    sceneDescription: string,
    characterContext: string,
    previousImages: string[] = [],
    storyStyle: string = "cinematic",
  ): Promise<ImageGenerationResult> {
    try {
      console.log("üé® Generating story image:", {
        sceneLength: sceneDescription.length,
        hasCharacterContext: !!characterContext,
        previousImagesCount: previousImages.length,
        storyStyle,
      });

      // Build the image prompt with continuity considerations
      const imagePrompt = this.buildImagePrompt(
        sceneDescription,
        characterContext,
        previousImages,
        storyStyle,
      );

      console.log("üìù Image prompt:", imagePrompt);

      // For now, we'll use a placeholder approach since the AI SDK doesn't directly support image generation
      // In a real implementation, you would call the Google GenAI image generation API directly
      const imageData = await this.generateImageViaAPI(imagePrompt);

      return {
        imageUrl: `data:image/png;base64,${imageData}`,
        imageData: imageData,
        imagePrompt: imagePrompt,
      };
    } catch (error) {
      console.error("‚ùå Error generating story image:", error);
      throw new Error(
        `Failed to generate image: ${error instanceof Error ? error.message : "Unknown error"}`,
      );
    }
  }

  /**
   * Build a comprehensive image prompt for story generation
   */
  private buildImagePrompt(
    sceneDescription: string,
    characterContext: string,
    previousImages: string[],
    storyStyle: string,
  ): string {
    let prompt = `Create a ${storyStyle} image for an interactive story. `;

    // Add scene description
    prompt += `Scene: ${sceneDescription}. `;

    // Add character context
    if (characterContext) {
      prompt += `Character: ${characterContext}. `;
    }

    // Add continuity instructions if we have previous images
    if (previousImages.length > 0) {
      prompt += `Maintain visual consistency with previous scenes. `;
      prompt += `Previous scene elements to consider: ${previousImages.slice(-2).join(", ")}. `;
    }

    // Add style and quality instructions
    prompt += `Style: ${storyStyle}, high quality, detailed, atmospheric lighting. `;
    prompt += `Avoid text or words in the image. Focus on the environment, characters, and mood.`;

    return prompt;
  }

  /**
   * Generate image via Google GenAI API using Gemini 2.5 Flash Image
   * This uses the actual Google GenAI image generation API
   */
  private async generateImageViaAPI(prompt: string): Promise<string> {
    try {
      console.log("üîÑ Calling Google GenAI API with prompt:", prompt);

      // Use Google's Imagen model for image generation
      const imageResponse = await this.ai.models.generateImages({
        model: "imagen-4.0-generate-001",
        prompt: prompt,
        config: {
          numberOfImages: 1,
        },
      });

      const imageData = imageResponse.generatedImages?.[0]?.image?.imageBytes;

      if (!imageData) {
        throw new Error("No image generated by GenAI API");
      }

      console.log("‚úÖ Image generation completed successfully");
      return imageData;
    } catch (error) {
      console.error("‚ùå Error calling Google GenAI API:", error);

      // Fallback to placeholder if API fails
      console.log("üîÑ Falling back to placeholder image");
      const placeholderImage =
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==";

      return placeholderImage;
    }
  }

  /**
   * Generate an image for the initial story scene
   */
  async generateInitialSceneImage(
    storyTitle: string,
    initialScene: string,
    storyStyle: string,
  ): Promise<ImageGenerationResult> {
    const sceneDescription = `Opening scene of "${storyTitle}": ${initialScene}`;
    const characterContext = "The main character entering the scene";

    return this.generateStoryImage(
      sceneDescription,
      characterContext,
      [],
      storyStyle,
    );
  }

  /**
   * Generate an image for a story turn with continuity
   */
  async generateTurnImage(
    turnDescription: string,
    characterContext: string,
    previousTurnImages: string[],
    storyStyle: string,
  ): Promise<ImageGenerationResult> {
    return this.generateStoryImage(
      turnDescription,
      characterContext,
      previousTurnImages,
      storyStyle,
    );
  }
}

// Export singleton instance
export const imageGenerationService = ImageGenerationService.getInstance();
